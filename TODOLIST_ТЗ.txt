Техническое задание (ТЗ) Описание проекта
Проект представляет собой веб-приложение для управления задачами (To-Do List).
Цель приложения — предоставить пользователям удобный инструмент для организации задач, их категоризации, отслеживания выполнения и управления профилем.

Функциональные требования
Регистрация и авторизация:
Пользователь может зарегистрироваться, указав уникальное имя пользователя, email и пароль.
Пароль должен быть защищен с использованием хеширования.
Пользователь может войти в систему с использованием email и пароля.
Поддержка функции "Запомнить меня" для автоматической авторизации.
Управление задачами:
Добавление новой задачи:
Название задачи (обязательное поле).
Описание задачи (необязательное поле).
Категория задачи (выпадающий список: Work, Home, Study, General).
Редактирование существующих задач:
Возможность изменять название, описание и категорию задачи.
Отметка задач как выполненных или незавершенных:
Кнопки "Complete" и "Incomplete" для изменения статуса задачи.
Удаление задач:
Кнопка "Delete" для удаления задачи.
Поиск задач по названию:
Поле поиска с фильтрацией задач по ключевым словам.
Профиль пользователя:
Просмотр количества созданных задач.
Обновление имени пользователя и пароля:
Проверка старого пароля перед обновлением.
Защита профиля от несанкционированного доступа.
Пагинация:
Отображение задач на страницах с ограничением по количеству задач на странице (например, 5 задач).
Кнопки "Previous" и "Next" для перехода между страницами.
Интерфейс:
Современный дизайн с использованием Bootstrap.
Адаптивный интерфейс для работы на различных устройствах.
Технические требования
Среда разработки:
Python
Flask (веб-фреймворк)
SQLAlchemy (ORM для работы с базой данных)
База данных:
SQLite (для хранения данных о пользователях и задачах).
Библиотеки:
Flask-WTF (формы и валидация).
Werkzeug (хеширование паролей).
Flask-Login (управление сессиями пользователей).
Email-validator (валидация email).
Bootstrap (стилизация интерфейса).
Структура проекта:
Python: бизнес-логика, маршруты, работа с базой данных.
HTML: шаблоны для отображения интерфейса.
Flask: маршрутизация и обработка запросов.
SQLAlchemy: ORM-модели для взаимодействия с базой данных.
Ошибки и предупреждения:
Обработка ошибок, таких как неверный логин/пароль, дублирование email или имени пользователя.
Предупреждения о некорректных данных в формах.
Безопасность:
Защита от CSRF-атак (использование Flask-WTF).
Хеширование паролей с использованием pbkdf2:sha256.